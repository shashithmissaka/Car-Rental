package com.carrental.controller;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.math.BigDecimal;

import com.carrental.dao.BookingDAO;
import com.carrental.dao.CarDAO;
import com.carrental.model.Booking;
import com.carrental.model.Car;

@WebServlet("/BookingServlet")
public class BookingServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Get username from request
        String username = request.getParameter("username");
        if (username == null || username.isEmpty()) {
            response.sendRedirect("userLogin.jsp");
            return;
        }

        // Get other parameters from the request
        String startLocation = request.getParameter("startLocation");
        String destination = request.getParameter("destination");
        String carIdParam = request.getParameter("carId");
        String paymentMethod = request.getParameter("paymentMethod");

        // Validate required parameters
        if (startLocation == null || destination == null || carIdParam == null || paymentMethod == null ||
            startLocation.isEmpty() || destination.isEmpty() || carIdParam.isEmpty() || paymentMethod.isEmpty()) {
            response.sendRedirect("availableCars.jsp?error=missingParams");
            return;
        }

        // Parse carId from the string
        int carId;
        try {
            carId = Integer.parseInt(carIdParam);
        } catch (NumberFormatException e) {
            response.sendRedirect("availableCars.jsp?error=invalidCarId");
            return;
        }

        // Fetch the selected car details
        Car selectedCar = CarDAO.getCarById(carId);
        if (selectedCar == null) {
            response.sendRedirect("availableCars.jsp?error=carNotFound");
            return;
        }

        // Check if the car is available
        if (!selectedCar.isAvailable()) {
            response.sendRedirect("availableCars.jsp?error=noCarAvailable");
            return;
        }

        // Get car type, assigned driver ID, and distance (fetch directly from the selected car)
        String carType = selectedCar.getCarType();
        int driverId = selectedCar.getDriverId();
        int distance = selectedCar.getDistance();  // Fetching distance directly from the car

        // Ensure distance is valid
        if (distance <= 0) {
            response.sendRedirect("availableCars.jsp?error=invalidDistance");
            return;
        }

     // Apply discount based on car type
        double discountPercentage = 0.05; // Default 5% discount

        if (carType.equalsIgnoreCase("Luxury")) {
            discountPercentage = 0.5; // 50% discount for Luxury (Matches confirmBooking.jsp)
        } else if (carType.equalsIgnoreCase("Semi Luxury")) {
            discountPercentage = 0.15; // 15% discount
        } else if (carType.equalsIgnoreCase("Normal")) {
            discountPercentage = 0.1; // 10% discount
        }

        // Calculate discounted price, tax, and final price
        BigDecimal originalPrice = selectedCar.getPrice();
        BigDecimal discountedPrice = originalPrice.multiply(BigDecimal.ONE.subtract(BigDecimal.valueOf(discountPercentage)));
        BigDecimal taxAmount = discountedPrice.multiply(new BigDecimal(0.1)); // 10% tax
        BigDecimal finalPrice = discountedPrice.add(taxAmount);


        // Create a new booking with the distance
        Booking booking = new Booking(
            0,                         // ID auto-generated by DB
            username,
            carId,
            selectedCar.getCarName(),
            startLocation,
            destination,
            originalPrice,             // Store original price
            discountedPrice,           // Store discounted price
            taxAmount,                 // Store tax amount
            finalPrice,                // Store final price
            "Pending",                 // Initial payment status
            null,                      // Created at (DB default)
            driverId,
            paymentMethod,
            carType,
            distance,                  // Add the distance to the booking
            null                       // Transaction ID (null for now, to be updated later)
        );

        // Add the booking to the database
        boolean success = BookingDAO.addBooking(booking);

        if (!success) {
            response.sendRedirect("availableCars.jsp?error=bookingFailed");
            return;
        }

        // Update car availability
        boolean availabilityUpdated = CarDAO.updateCarAvailability(carId, 0); // 0 = not available
        if (!availabilityUpdated) {
            response.sendRedirect("availableCars.jsp?error=carAvailabilityFailed");
            return;
        }

        // Retrieve last booking ID
        int bookingId = BookingDAO.getLastBookingId(username);
        if (bookingId > 0) {
            response.sendRedirect("payment.jsp?bookingId=" + bookingId);
        } else {
            response.sendRedirect("availableCars.jsp?error=bookingIdNotFound");
        }
    }
}